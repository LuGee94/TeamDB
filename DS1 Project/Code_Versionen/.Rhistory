cor(corona_data_death_explanation$`Nurses/1000 2019`, corona_data_death_explanation$`Physicians/1000 2019`)
cor(corona_data_death_explanation$Health_Expenditure_2018, corona_data_death_explanation$gdp_per_capita)
lin_reg_cov_deaths_pm <- lm( cvd_death_rate ~ diabetes_prevalence + hospital_beds_per_100k + `Life-Expectancy 2019` + `Nurses/1000 2019` + `Physicians/1000 2019` , data = corona_data_death_explanation)
summary(lin_reg_cov_deaths_pm)
plot(`Life-Expectancy 2019`, cvd_death_rate)
plot(Health_Expenditure_2018, cvd_death_rate)
lin_reg_deaths_he <- lm ( cvd_death_rate ~ poly(Health_Expenditure_2018,4, raw = T) + poly(`Life-Expectancy 2019`,4, raw = T), data = corona_data_death_explanation)
summary(lin_reg_deaths_he)
#----------------</Regression analysis - death rate>---------------------------------------------#
#----------------<Regression analysis- infection rate>-------------------------------------------#
#----------------</Regression analysis - infection rate>-----------------------------------------#
#----------------<Clustering kmeans>-------------------------------------------------------------#
#ungroup(current_coronadata)
#cluster based on total cases per million and total deaths per million
cluster_coronadata <- select(current_coronadata_filter_20000,'location','total_cases_per_million','total_deaths_per_million')
cluster_coronadata <- as.data.frame(cluster_coronadata)
row.names(cluster_coronadata) <- cluster_coronadata$location
cluster_coronadata$location <- NULL
view(cluster_coronadata)
set.seed(123)
km2 <- kmeans(cluster_coronadata, 2, iter.max = 25, nstart = 25)
km3 <- kmeans(cluster_coronadata, 3, iter.max = 25, nstart = 25)
km4 <- kmeans(cluster_coronadata, 4, iter.max = 25, nstart = 25)
km5 <- kmeans(cluster_coronadata, 5, iter.max = 25, nstart = 25)
km6 <- kmeans(cluster_coronadata, 6, iter.max = 25, nstart = 25)
km7 <- kmeans(cluster_coronadata, 7, iter.max = 25, nstart = 25)
km8 <- kmeans(cluster_coronadata, 8, iter.max = 25, nstart = 25)
km9 <- kmeans(cluster_coronadata, 9, iter.max = 25, nstart = 25)
wss <- c(sum(km2$withinss), sum(km3$withinss), sum(km4$withinss),
+ sum(km5$withinss), sum(km6$withinss), sum(km7$withinss), sum(km8$withinss), sum(km9$withinss))
names(wss) <- 2:9
barplot(wss)
fviz_cluster(km2, data = cluster_coronadata)
fviz_cluster(km3, data = cluster_coronadata)
#outlier by qatar, filter that out
cluster_coronadata_filtered <- select(current_coronadata_filter_20000,'location','total_cases_per_million','total_deaths_per_million')
cluster_coronadata_filtered <- filter(cluster_coronadata_filtered, location != "Qatar")
cluster_coronadata_filtered <- as.data.frame(cluster_coronadata_filtered)
row.names(cluster_coronadata_filtered) <- cluster_coronadata_filtered$location
cluster_coronadata_filtered$location <- NULL
km2_filtered <- kmeans(cluster_coronadata_filtered, 2, iter.max = 25, nstart = 25)
km3_filtered <- kmeans(cluster_coronadata_filtered, 3, iter.max = 25, nstart = 25)
km4_filtered <- kmeans(cluster_coronadata_filtered, 4, iter.max = 25, nstart = 25)
km5_filtered <- kmeans(cluster_coronadata_filtered, 5, iter.max = 25, nstart = 25)
km6_filtered <- kmeans(cluster_coronadata_filtered, 6, iter.max = 25, nstart = 25)
km7_filtered <- kmeans(cluster_coronadata_filtered, 7, iter.max = 25, nstart = 25)
km8_filtered <- kmeans(cluster_coronadata_filtered, 8, iter.max = 25, nstart = 25)
km9_filtered <- kmeans(cluster_coronadata_filtered, 9, iter.max = 25, nstart = 25)
wss_filtered <- c(sum(km2_filtered$withinss), sum(km3_filtered$withinss), sum(km4_filtered$withinss),
+ sum(km5_filtered$withinss), sum(km6_filtered$withinss), sum(km7_filtered$withinss), sum(km8_filtered$withinss), sum(km9_filtered$withinss))
names(wss_filtered) <- 2:9
barplot(wss_filtered)
fviz_cluster(km2_filtered, data = cluster_coronadata_filtered)
fviz_cluster(km3_filtered, data = cluster_coronadata_filtered)
#lets try the development of infections
cluster_corona_development <- select(current_coronadata_filter_20000,'location','days_100_to_1000_infections','days_100_to_10000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections')
cluster_corona_development  <- as.data.frame(cluster_corona_development)
row.names(cluster_corona_development) <- cluster_corona_development$location
cluster_corona_development$location <- NULL
cluster_corona_development$total_cases <- NULL
cor(cluster_corona_development)
#because theres correlation between column 2 and 3, we remove column 2, because the correlation between column1&column3 < column1&column2
cluster_corona_development$days_100_to_10000_infections <- NULL
km2_dev <- kmeans(cluster_corona_development, 2, iter.max = 25, nstart = 25)
km3_dev <- kmeans(cluster_corona_development, 3, iter.max = 25, nstart = 25)
km4_dev <- kmeans(cluster_corona_development, 4, iter.max = 25, nstart = 25)
km5_dev <- kmeans(cluster_corona_development, 5, iter.max = 25, nstart = 25)
km6_dev <- kmeans(cluster_corona_development, 6, iter.max = 25, nstart = 25)
km7_dev <- kmeans(cluster_corona_development, 7, iter.max = 25, nstart = 25)
km8_dev <- kmeans(cluster_corona_development, 8, iter.max = 25, nstart = 25)
km9_dev <- kmeans(cluster_corona_development, 9, iter.max = 25, nstart = 25)
wss_dev <- c(sum(km2_dev$withinss), sum(km3_dev$withinss), sum(km4_dev$withinss),
+ sum(km5_dev$withinss), sum(km6_dev$withinss), sum(km7_dev$withinss), sum(km8_dev$withinss), sum(km9_dev$withinss))
names(wss_dev) <- 2:9
barplot(wss_dev)
fviz_cluster(km2_dev, data = cluster_corona_development)
fviz_cluster(km3_dev, data = cluster_corona_development)
#lets try all of these variables
cluster_20000 <- select(current_coronadata_filter_20000, 'location', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000 <- as.data.frame(cluster_20000)
row.names(cluster_20000) <- cluster_20000$location
cluster_20000$location <- NULL
cor(cluster_20000)
km2 <- kmeans(cluster_20000, 2, iter.max = 25, nstart = 25)
km3 <- kmeans(cluster_20000, 3, iter.max = 25, nstart = 25)
km4 <- kmeans(cluster_20000, 4, iter.max = 25, nstart = 25)
km5 <- kmeans(cluster_20000, 5, iter.max = 25, nstart = 25)
km6 <- kmeans(cluster_20000, 6, iter.max = 25, nstart = 25)
km7 <- kmeans(cluster_20000, 7, iter.max = 25, nstart = 25)
km8 <- kmeans(cluster_20000, 8, iter.max = 25, nstart = 25)
km9 <- kmeans(cluster_20000, 9, iter.max = 25, nstart = 25)
wss <- c(sum(km2$withinss), sum(km3$withinss), sum(km4$withinss),
+ sum(km5$withinss), sum(km6$withinss), sum(km7$withinss), sum(km8$withinss), sum(km9$withinss))
names(wss) <- 2:9
barplot(wss)
fviz_cluster(km2, data = cluster_20000)
fviz_cluster(km3, data = cluster_20000)
#outlier qatar, filter that out
cluster_20000 <- select(current_coronadata_filter_20000, 'location', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000 <- as.data.frame(cluster_20000)
cluster_20000 <- filter(cluster_20000, location != "Qatar")
row.names(cluster_20000) <- cluster_20000$location
cluster_20000$location <- NULL
km2 <- kmeans(cluster_20000, 2, iter.max = 25, nstart = 25)
km3 <- kmeans(cluster_20000, 3, iter.max = 25, nstart = 25)
km4 <- kmeans(cluster_20000, 4, iter.max = 25, nstart = 25)
km5 <- kmeans(cluster_20000, 5, iter.max = 25, nstart = 25)
km6 <- kmeans(cluster_20000, 6, iter.max = 25, nstart = 25)
km7 <- kmeans(cluster_20000, 7, iter.max = 25, nstart = 25)
km8 <- kmeans(cluster_20000, 8, iter.max = 25, nstart = 25)
km9 <- kmeans(cluster_20000, 9, iter.max = 25, nstart = 25)
wss <- c(sum(km2$withinss), sum(km3$withinss), sum(km4$withinss),
+ sum(km5$withinss), sum(km6$withinss), sum(km7$withinss), sum(km8$withinss), sum(km9$withinss))
names(wss) <- 2:9
barplot(wss)
fviz_cluster(km2, data = cluster_20000)
fviz_cluster(km3, data = cluster_20000)
#result looks weird, maybe because the variables aren't standardized, letz fix that
cluster_20000 <- select(current_coronadata_filter_20000, 'location', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000 <- as.data.frame(cluster_20000)
cluster_20000 <- filter(cluster_20000, location != "Qatar" )
row.names(cluster_20000) <- cluster_20000$location
cluster_20000$location <- NULL
cluster_20000 <- scale(cluster_20000)
cor(cluster_20000)
km2 <- kmeans(cluster_20000, 2, iter.max = 25, nstart = 25)
km3 <- kmeans(cluster_20000, 3, iter.max = 25, nstart = 25)
km4 <- kmeans(cluster_20000, 4, iter.max = 25, nstart = 25)
km5 <- kmeans(cluster_20000, 5, iter.max = 25, nstart = 25)
km6 <- kmeans(cluster_20000, 6, iter.max = 25, nstart = 25)
km7 <- kmeans(cluster_20000, 7, iter.max = 25, nstart = 25)
km8 <- kmeans(cluster_20000, 8, iter.max = 25, nstart = 25)
km9 <- kmeans(cluster_20000, 9, iter.max = 25, nstart = 25)
wss <- c(sum(km2$withinss), sum(km3$withinss), sum(km4$withinss),
+ sum(km5$withinss), sum(km6$withinss), sum(km7$withinss), sum(km8$withinss), sum(km9$withinss))
names(wss) <- 2:9
barplot(wss)
fviz_cluster(km2, data = cluster_20000)
fviz_cluster(km3, data = cluster_20000)
#result still looks weird, maybe because we have two outliers singapore and kuwait, let's check the result without them
cluster_20000 <- select(current_coronadata_filter_20000, 'location', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000 <- as.data.frame(cluster_20000)
cluster_20000 <- filter(cluster_20000, location != "Qatar" & location != "Kuwait" & location != "Singapore")
row.names(cluster_20000) <- cluster_20000$location
cluster_20000$location <- NULL
cluster_20000 <- scale(cluster_20000)
cor(cluster_20000)
km2 <- kmeans(cluster_20000, 2, iter.max = 25, nstart = 25)
km3 <- kmeans(cluster_20000, 3, iter.max = 25, nstart = 25)
km4 <- kmeans(cluster_20000, 4, iter.max = 25, nstart = 25)
km5 <- kmeans(cluster_20000, 5, iter.max = 25, nstart = 25)
km6 <- kmeans(cluster_20000, 6, iter.max = 25, nstart = 25)
km7 <- kmeans(cluster_20000, 7, iter.max = 25, nstart = 25)
km8 <- kmeans(cluster_20000, 8, iter.max = 25, nstart = 25)
km9 <- kmeans(cluster_20000, 9, iter.max = 25, nstart = 25)
wss <- c(sum(km2$withinss), sum(km3$withinss), sum(km4$withinss),
+ sum(km5$withinss), sum(km6$withinss), sum(km7$withinss), sum(km8$withinss), sum(km9$withinss))
names(wss) <- 2:9
barplot(wss)
fviz_cluster(km2, data = cluster_20000)
fviz_cluster(km3, data = cluster_20000)
fviz_cluster(km4, data = cluster_20000)
#no relevant error reduce with 4 clusters, 3 clusters are the optimal number of k (in our opinion)
#regarding to elbow-knick of barplot
km3$cluster
cluster_assignment <- km3$cluster
cluster_assignment <- as.data.frame(cluster_assignment)
cluster_assignment <- rownames_to_column(cluster_assignment, var = "location")
current_corona_with_clusters <- current_coronadata_filter_20000 %>%
left_join(cluster_assignment, c("location" = "location"))
current_corona_with_clusters <- filter(current_corona_with_clusters, cluster_assignment != "NA")
view(current_corona_with_clusters)
#----------------</Clustering kmeans>------------------------------------------------------------#
#----------------<regression analysis based on clusters>-----------------------------------------#
str(current_corona_with_clusters)
corona_cluster_1 <- current_corona_with_clusters
corona_cluster_1 <- filter(current_corona_with_clusters, cluster_assignment == 1)
corona_cluster_2 <- current_corona_with_clusters
corona_cluster_2 <- filter(current_corona_with_clusters, cluster_assignment == 2)
corona_cluster_3 <- current_corona_with_clusters
corona_cluster_3 <- filter(current_corona_with_clusters, cluster_assignment == 3)
view(corona_cluster_1)
view(corona_cluster_2)
view(corona_cluster_3)
#----------------</regression analysis based on clusters>----------------------------------------#
#----------------<Clustering dbscan>-------------------------------------------------------------#
dbscan <- dbscan(cluster_20000, eps = 1, minPts = 2, weights = NULL)
dbscan
fviz_cluster(dbscan, data = cluster_20000)
dbscan <- dbscan(cluster_20000, eps = 1.2, minPts = 3, weights = NULL)
dbscan
fviz_cluster(dbscan, data = cluster_20000)
dbscan <- dbscan(cluster_20000, eps = 1.3, minPts = 2, weights = NULL)
dbscan
fviz_cluster(dbscan, data = cluster_20000)
dbscan <- dbscan(cluster_20000, eps = 1.5, minPts = 5, weights = NULL)
dbscan
fviz_cluster(dbscan, data = cluster_20000)
#----------------</Clustering dbscan>------------------------------------------------------------#
#----------------<Hierarchical Clustering>-------------------------------------------------------------#
cluster_20000_h <- select(current_coronadata_filter_20000, 'location', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000_h <- as.data.frame(cluster_20000_h)
View(cluster_20000_h)
row.names(cluster_20000_h) <- cluster_20000_h$location
cluster_20000_h$location <- NULL
describe(cluster_20000_h)
#Standardisieren
cluster_20000_h_scaled <- cbind(scale(cluster_20000_h[,1:4]))
#Distanzen bilden
dist.cluster_20000_h <- dist(cluster_20000_h_scaled[,1:4], method = "euclidean") # Alternative Methoden sind Maximum, Manhatten, canberra, pinary, minkowski
#Clustern
fit1 <- hclust(dist.cluster_20000_h, method = "ward.D2")
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
# Qatar, Kuweit, Singapore außreißer - Rausnehmen
cluster_20000_h <- select(current_coronadata_filter_20000, 'location', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000_h <- as.data.frame(cluster_20000_h)
View(cluster_20000_h)
cluster_20000_h <- filter(cluster_20000_h, location != "Qatar")
cluster_20000_h <- filter(cluster_20000_h, location != "Kiwait")
cluster_20000_h <- filter(cluster_20000_h, location != "Singapore")
row.names(cluster_20000_h) <- cluster_20000_h$location
cluster_20000_h$location <- NULL
describe(cluster_20000_h)
#Standardisieren
cluster_20000_h_scaled <- cbind(scale(cluster_20000_h[,1:4]))
#Distanzen bilden
dist.cluster_20000_h <- dist(cluster_20000_h_scaled[,1:4], method = "euclidean") # Alternative Methoden sind Maximum, Manhatten, canberra, pinary, minkowski
#Clustern
fit1 <- hclust(dist.cluster_20000_h, method = "ward.D2") #Alternative Methoden: ward.D, single, complete, average, mcquitty ...
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
# Es bilden sich 4 Cluster ->
View(CoronaData_20000)
View(CoronaData_20000)
View(current_corona_with_clusters)
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'gdp_per_capita', 'location', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections')
View(current_coronadata_filter_20000)
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'gdp_per_capita', 'location', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections') %>%
group_by("location")
View(current_coronadata_filter_20000)
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections') %>%
group_by("location")
View(current_coronadata_filter_20000)
cluster_20000_h <- select(current_coronadata_filter_20000, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000_h <- as.data.frame(cluster_20000_h)
View(cluster_20000_h)
cluster_20000_h <- as.data.frame(cluster_20000_h)
View(cluster_20000_h)
cluster_20000_h <- select(current_coronadata_filter_20000, 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000_h <- as.data.frame(cluster_20000_h)
View(cluster_20000_h)
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections') %>%
View(current_coronadata_filter_20000)
cluster_20000_h <- select(current_coronadata_filter_20000, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000_h <- select(current_coronadata_filter_20000, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000_h <- select(current_coronadata_filter_20000, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections') %>%
group_by("location")
View(current_coronadata_filter_20000)
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections') %>%
View(current_coronadata_filter_20000)
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections') %>%
View(current_coronadata_filter_20000)
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections') %>%
View(current_coronadata_filter_20000)
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections') %>%
View(current_coronadata_filter_20000)
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections') %>%
View(current_coronadata_filter_20000)
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections')
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections')
View(current_coronadata_filter_20000)
cluster_20000_h <- select(current_coronadata_filter_20000, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000_h <- as.data.frame(cluster_20000_h)
View(cluster_20000_h)
View(cluster_20000_h)
row.names(cluster_20000_h) <- cluster_20000_h$location
cluster_20000_h$location <- NULL
View(cluster_20000_h)
describe(cluster_20000_h)
#Standardisieren
cluster_20000_h_scaled <- cbind(scale(cluster_20000_h[,1:10]))
#Standardisieren
cluster_20000_h_scaled <- cbind(scale(cluster_20000_h[,1:6]))
dist.cluster_20000_h <- dist(cluster_20000_h_scaled[,1:4], method = "euclidean") # Alternative Methoden sind Maximum, Manhatten, canberra, pinary, minkowski
dist.cluster_20000_h <- dist(cluster_20000_h_scaled[,1:4], method = "euclidean") # Alternative Methoden sind Maximum, Manhatten, canberra, pinary, minkowski
#Clustern
fit1 <- hclust(dist.cluster_20000_h, method = "ward.D2")
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
#Standardisieren
cluster_20000_h_scaled <- cbind(scale(cluster_20000_h[,1:6]))
dist.cluster_20000_h <- dist(cluster_20000_h_scaled[,1:6], method = "euclidean") # Alternative Methoden sind Maximum, Manhatten, canberra, pinary, minkowski
#Clustern
fit1 <- hclust(dist.cluster_20000_h, method = "ward.D2")
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
fit1 <- hclust(dist.cluster_20000_h, method = "euclidean")
#Standardisieren
#Option 1:cluster_20000_h_scaled <- cbind(scale(cluster_20000_h[,1:6]))
#Option 2
z_data <- as.data.frame(sapply(cluster_2000_h, scale()))
#Standardisieren Option 1:
cluster_20000_h_scaled <- cbind(scale(cluster_20000_h[,1:6]))
#Option 2 z_data <- as.data.frame(sapply(cluster_2000_h, scale()))
View(cluster_20000_h_scaled)
dist.cluster_20000_h <- dist(cluster_20000_h_scaled[,1:6], method = "euclidean") # Alternative Methoden sind Maximum, Manhatten, canberra, pinary, minkowski
view(dist.cluster_20000_h)
dist.cluster_20000_h <- dist(cluster_20000_h_scaled[,1:6], method = "euclidean") # Alternative Methoden sind Maximum, Manhatten, canberra, pinary, minkowski
#Clustern
fit1 <- hclust(dist.cluster_20000_h, method = "ward.D2")
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7, k=4)
rect.hclust(fit1, k=4)
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7) %>%
rect.hclust(fit1, k=4)
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
rect.hclust(fit1, k=4)
describe(fit1)
describe(cluster_20000_h)
gsa3 <- cutree(fit1, k = 4)
gsa3
View(gsa3)
current_coronadata_with_cluster <- CoronaData_Joined %>%
left_join(gsa3)
current_coronadata_with_cluster <- CoronaData_Joined %>%
left_join(gsa3, c("location" = "location"))
cluster_20000_h <- select(current_coronadata_filter_20000, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000_h <- as.data.frame(cluster_20000_h)
View(cluster_20000_h)
#Join Clusters
current_coronadata_with_cluster <- cluster_20000_h %>%
left_join(gsa3, c("location" = "location"))
View(current_coronadata_with_cluster)
View(current_coronadata_with_cluster)
View(gsa3)
#Join Clusters
current_coronadata_with_cluster <- cluster_20000_h %>%
left_join(gsa3)
abline(h = 3, col = 'red')
rect.hclust(fit1, k=4, border =2.6)
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
rect.hclust(fit1, k=4, border =2.6)
abline(h = 3, col = 'red')
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj <- as.dendrogram(fit1)
avg_col_dend <- color_branches(avg_dend_obj, h = 4)
plot(avg_col_dend)
avg_col_dend <- color_branches(avg_dend_obj, h = 3)
plot(avg_col_dend)
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj <- as.dendrogram(fit1)
avg_col_dend <- color_branches(avg_dend_obj, h = 3)
plot(avg_col_dend)
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
rect.hclust(fit1, k=4)
abline(h = 3, col = 'red')
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj <- as.dendrogram(fit1)
avg_col_dend <- color_branches(avg_dend_obj, h = 3)
plot(avg_col_dend)
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
rect.hclust(fit1, k=4)
abline(h = 3, col = 'red')
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj <- as.dendrogram(fit1)
avg_col_dend <- color_branches(avg_dend_obj, h = 5)
plot(avg_col_dend)
avg_col_dend <- color_branches(avg_dend_obj, h = 5, k=4)
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj <- as.dendrogram(fit1)
avg_col_dend <- color_branches(avg_dend_obj, h = 5, k=4)
plot(avg_col_dend)
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj <- as.dendrogram(fit1)
avg_col_dend <- color_branches(avg_dend_obj, h = 5, k=4, border = 4)
plot(avg_col_dend)
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
rect.hclust(fit1, k=4)
abline(h = 3, col = 'red')
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj <- as.dendrogram(fit1)
avg_col_dend <- color_branches(avg_dend_obj, h = 5, k=4, border = 4)
plot(avg_col_dend)
suppressPackageStartupMessages(library(dplyr))
seeds_df_cl <- mutate(seeds_df, cluster = fit1)
suppressPackageStartupMessages(library(dplyr))
seeds_df_cl <- mutate(current_coronadata_filter_20000, cluster = fit1)
count(current_coronadata_filter_20000, cluster)
suppressPackageStartupMessages(library(dplyr))
seeds_df_cl <- mutate(current_coronadata_filter_20000, cluster = cluster_20000_h)
count(current_coronadata_filter_20000, cluster)
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
rect.hclust(fit1, k=4)
abline(h = 3, col = 'red')
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj <- as.dendrogram(fit1)
avg_col_dend <- color_branches(avg_dend_obj, h = 5, k=4, border = 4)
plot(avg_col_dend)
View(gsa3)
gsa3
km3$cluster
gsa3$cluster
gsa3
View(gsa3)
gsa3$V1
View(gsa3)
#________________'
km3$cluster
cluster_assignment2 <- gsa3
cluster_assignment2 <- as.data.frame(cluster_assignment2)
cluster_assignment2 <- rownames_to_column(cluster_assignment2, var = "location")
current_corona_with_clusters2 <- current_coronadata_filter_20000 %>%
left_join(cluster_assignment2, c("location" = "location"))
current_corona_with_clusters2
View(current_corona_with_clusters2)
view(corona_cluster_1_2)
View(corona_cluster_1_2)
View(corona_cluster_2_2)
View(corona_cluster_3_2)
View(corona_cluster_4_2)
View(current_corona_with_cluster_1_2)
View(current_corona_with_cluster_2_2)
View(current_corona_with_cluster_3_2)
View(current_corona_with_cluster_4_2)
View(corona_cluster_1_2)
corona_cluster_1_2 <- current_corona_with_clusters2
corona_cluster_1_2 <- filter(current_corona_with_clusters2, cluster_assignment == 1)
corona_cluster_2_2 <- current_corona_with_clusters2
corona_cluster_2_2 <- filter(current_corona_with_clusters2, cluster_assignment == 2)
corona_cluster_3_2 <- current_corona_with_clusters2
corona_cluster_3_2 <- filter(current_corona_with_clusters2, cluster_assignment == 3)
corona_cluster_4_2 <- current_corona_with_clusters2
corona_cluster_4_2 <- filter(current_corona_with_clusters2, cluster_assignment == 4)
View(corona_cluster_1_2)
View(corona_cluster_2_2)
View(corona_cluster_3_2)
View(corona_cluster_4_2)
View(current_corona_with_clusters2)
corona_cluster_1_2 <- current_corona_with_clusters2
corona_cluster_1_2 <- filter(current_corona_with_clusters2, cluster_assignment2 == 1)
corona_cluster_2_2 <- current_corona_with_clusters2
corona_cluster_2_2 <- filter(current_corona_with_clusters2, cluster_assignment2 == 2)
corona_cluster_3_2 <- current_corona_with_clusters2
corona_cluster_3_2 <- filter(current_corona_with_clusters2, cluster_assignment2 == 3)
corona_cluster_4_2 <- current_corona_with_clusters2
corona_cluster_4_2 <- filter(current_corona_with_clusters2, cluster_assignment2 == 4)
View(corona_cluster_1_2)
View(corona_cluster_2_2)
View(corona_cluster_3_2)
View(corona_cluster_4_2)
install.packages("opticskxi")
#----------------<read corona data>-------------------------------------------------------------#
#read csv-file corona time series  2020_05_29_CoronaData.csv
CoronaData <- read.csv(url("https://raw.githubusercontent.com/LuGee94/TeamDB/master/DS1%20Project/Datenquellen/Corona_Zeitreihen/corona_data.csv"))
current_coronadata_filter_20000 <- select(current_corona_with_clusters, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections')
View(current_coronadata_filter_20000)
cluster_20000_h <- select(current_coronadata_filter_20000, 'location', 'gdp_per_capita', 'total_cases_per_million', 'total_deaths_per_million', 'days_100_to_1000_infections', 'days_1000_to_10000_infections', 'days_10000_to_20000_infections' )
cluster_20000_h <- as.data.frame(cluster_20000_h)
View(cluster_20000_h)
row.names(cluster_20000_h) <- cluster_20000_h$location
cluster_20000_h$location <- NULL
describe(cluster_20000_h)
#Standardisieren Option 1:
cluster_20000_h_scaled <- cbind(scale(cluster_20000_h[,1:6]))
#Distanzen bilden
dist.cluster_20000_h <- dist(cluster_20000_h_scaled[,1:6], method = "euclidean") # Alternative Methoden sind Maximum, Manhatten, canberra, pinary, minkowski
#Clustern
fit1 <- hclust(dist.cluster_20000_h, method = "ward.D2")
#Plotten
plot(fit1, hang=-1, labels = cluster_20000_h$location, cex= 0.7)
rect.hclust(fit1, k=4)
abline(h = 3, col = 'red')
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj <- as.dendrogram(fit1)
avg_col_dend <- color_branches(avg_dend_obj, h = 5, k=4, border = 4)
plot(avg_col_dend)
#Table with assignments to cluster
gsa3 <- cutree(fit1, k = 4)
abline(h = 3, col = 'red')
gsa3$V1
View(gsa3)
#Write Cluster in DataSet
km3$cluster
cluster_assignment2 <- gsa3
cluster_assignment2 <- as.data.frame(cluster_assignment2)
cluster_assignment2 <- rownames_to_column(cluster_assignment2, var = "location")
current_corona_with_clusters2 <- current_coronadata_filter_20000 %>%
left_join(cluster_assignment2, c("location" = "location"))
View(current_corona_with_clusters2)
#/Write Cluster in DataSet
#Create Table for each Cluster
corona_cluster_1_2 <- current_corona_with_clusters2
corona_cluster_1_2 <- filter(current_corona_with_clusters2, cluster_assignment2 == 1)
corona_cluster_2_2 <- current_corona_with_clusters2
corona_cluster_2_2 <- filter(current_corona_with_clusters2, cluster_assignment2 == 2)
corona_cluster_3_2 <- current_corona_with_clusters2
corona_cluster_3_2 <- filter(current_corona_with_clusters2, cluster_assignment2 == 3)
corona_cluster_4_2 <- current_corona_with_clusters2
corona_cluster_4_2 <- filter(current_corona_with_clusters2, cluster_assignment2 == 4)
View(corona_cluster_1_2)
View(corona_cluster_2_2)
View(corona_cluster_3_2)
View(corona_cluster_4_2)
